// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

// File coded by Jared Orange

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
	
	//     DOCUMENTATION    //
	
	// A RAM unit can only be built using smaller RAM parts. A RAM512
	// is an array of 8 RAM64 chips (one below in size). RAM512 requires the use of 6 registers (2^6) 
	// Each RAM must be assigned a unique address (some integer between 0 and n-1) in order to be accessed
	// Each input is loaded corresponding to its data value and the RAM's output will start emitting it
    // In order to select the register specified by the address, we need a DMux8Way and Mux8Way16
	// The DMux8Way and Mux8Way16 would be assigned the remaining 2 address. 
	// The DMux8Way would take in the 8 inputs simultaneously and the Mux8Way16 would be fed out the
	// combinational logic circuit.
	
	DMux8Way(in=load, sel=address[6..8], a=load1, b=load2, c=load3, d=load4, e=load5, f=load6, g=load7, h=load8);
	RAM64(in=in, load=load1, address=address[0..5], out=out1);
	RAM64(in=in, load=load2, address=address[0..5], out=out2):
	RAM64(in=in, load=load3, address=address[0..5], out=out3);
	RAM64(in=in, load=load4, address=address[0..5], out=out4);
	RAM64(in=in, load=load5, address=address[0..5], out=out5):
	RAM64(in=in, load=load6, address=address[0..5], out=out6);
	RAM64(in=in, load=load7, address=address[0..5], out=out7);
	RAM64(in=in, load=load8, address=address[0..5], out=out8);
	Mux8Way16(a=out1, b=out2, c=out3, d=out4, e=out5, f=out6, g=out7, h=out8, sel=address[6..8], out=out);
}