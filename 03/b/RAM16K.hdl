// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

// File coded by Jared Orange

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
	// A RAM16K is an array of 4 RAM4K chips (one below in size). 
	// RAM16K requires the use of 14 registers (2^14) 
	// Each RAM must be assigned a unique address (some integer between 0 and n-1) in order to be accessed
	// Each input is loaded corresponding to its data value and the RAM's output will start emitting it
    // In order to select the register specified by the address, we need a DMux4Way and Mux4Way16
	// The DMux4Way and Mux4Way16 would be assigned the remaining 2 address. 
	// The DMux4Way would take in the 4 inputs simultaneously and the Mux4Way16 would be fed out the
	// combinational logic circuit.
	
    // Put your code here:
	
	DMux4Way(in=load, sel=address[12..13], a=a, b=b, c=c, d=d);
	RAM4K(in=in, load=a, address=[0..11], out=outa);
	RAM4K(in=in, load=b, address=[0..11], out=outb);
	RAM4K(in=in, load=c, address=[0..11], out=outc);
	RAM4K(in=in, load=d, address=[0..11], out=outd);
	Mux4Way16(a=outa, b=outb, c=outc, d=outd, sel=address[12..13], out=out);
}
	